(()=>{"use strict";class e{constructor(){this.toLoad=0,this.loaded=0,this.isLoaded=!1,this.list={}}load(e){const t=["png"],s=["json"],i=["toml"];return this.toLoad=e.length,new Promise((h=>{e.forEach((e=>{const n=e.split(".").pop()||"";t.includes(n)?this.loadImage(e,h):s.includes(n)?this.loadJson(e,h):i.includes(n)&&this.loadConfig(e,h)}))}))}loadHandler(e){this.loaded+=1,this.loaded===this.toLoad&&(this.loaded=0,this.toLoad=0,e(this),this.isLoaded=!0)}loadImage(e,t){const s=new Image;s.src=e,s.addEventListener("load",(()=>{this.loadHandler(t)}),!1);const i=e.split("/").pop().split(".")[0];i&&(this.list[i]=s)}async loadConfig(e,t){fetch(e).then((e=>e.text())).then((t=>{const s=t.split("\n").reduce(((e,t)=>{const[s,i]=t.trim().split("=");return s&&i?(e[s.trim()]=i.trim(),e):e}),{}),i=e.split("/").pop().split(".")[0];i&&(this.list[i]=s)}))}async loadJson(e,t){try{const s=await fetch(e),i=await s.json();this.loadHandler(t);const h=e.split("/").pop().split(".")[0];this.list[h]=i}catch(e){}}}const t=["KeyW","KeyA","KeyS","KeyD","Space","Escape","KeyI","KeyJ","KeyK","KeyL"];class s{constructor(e){this.keys={},console.log("Controller created"),this.game=e,this.player=e.level.player,window.addEventListener("keydown",(e=>this.handleKeyDown(e))),window.addEventListener("keyup",(e=>this.handleKeyUp(e)))}handleKeyDown(e){t.includes(e.code)&&(e.preventDefault(),this.keys[e.code]=1)}handleKeyUp(e){this.keys[e.code]=0}keyIsDown(e){return 1===this.keys[e]||!1}clearKeys(){this.keys={}}}const i={game:null,moveDisabled:!1,debug:!1,windowResolution:{width:255,height:240}};class h{constructor(e,t){this.x=e,this.y=t}add(e){return this.x+=e.x,this.y+=e.y,this}sub(e){return this.x-=e.x,this.y-=e.y,this}mul(e){return this.x*=e.x,this.y*=e.y,this}div(e){return this.x/=e.x,this.y/=e.y,this}clone(){return new h(this.x,this.y)}reset(){return this.x=0,this.y=0,this}}class n{constructor(){this.pos=new h(0,0),this.globalPos=new h(0,0),this.vel=new h(0,0),this.size=new h(8,8),this.rotation=0,this.speed=1,this.children=[],this.parent=null,this.id=Math.random().toString(16).substring(0,5)}addChild(e){this.children.includes(e)||(e.parent&&e.parent.removeChild(e),e.parent=this,this.children.push(e))}removeChild(e){e.parent=null,this.children=this.children.filter((t=>t!==e))}debugDraw(e,t=!1){i.debug&&(e.ctx.strokeStyle="magenta",e.ctx.strokeRect(this.pos.x,this.pos.y,this.size.x,this.size.y),t&&(e.ctx.strokeStyle="green",e.ctx.font="8px monospace",e.ctx.strokeText(this.id,this.pos.x,this.pos.y-4)))}update(e){this.children.forEach((t=>{t.update(e)}))}render(e){this.children.forEach((t=>{t.render(e)})),this.debugDraw(e)}isOutOfParent(e){return e.clone().add(new h(this.size.x,0)).x>=this.parent.size.x+this.parent.pos.x||e.clone().add(new h(0,this.size.y)).y>=this.parent.size.y+this.parent.pos.y||e.x<=this.parent.pos.x||e.y<=this.parent.pos.y}}const r={basic:{damage:10,speed:.5,color:"red",size:[2,2],rechargeTime:50}};var o;!function(e){e.Basic="basic"}(o||(o={}));class a{constructor(){this.health=100,this.exp=0,this.level=1,this.damage=10,this.speed=1,this.defense=1,this.recharged=0}}class l extends n{constructor(e,t,s){super(),this.pos=e,this.vel=t,this.type=s,this.size=new h(r[this.type].size[0],r[this.type].size[1]),this.id="player-bullet"}update(e){this.pos.add(this.vel.clone().mul(new h(r[this.type].speed*e,r[this.type].speed*e)))}render(e){e.ctx.save(),this.debugDraw(e),e.ctx.fillStyle=r[this.type].color,e.ctx.fillRect(this.pos.x,this.pos.y,2,2),e.ctx.restore()}}class d extends n{constructor(e,t){super(),this.stats=new a,this.bullets=[],this.pos=e,this.id=t}move(e){}fire(e,t){if(this.stats.recharged>r.basic.rechargeTime){let t=new h(this.pos.x,this.pos.y+16),s=new h(this.pos.x+14,this.pos.y+16);0===e.y&&(t=new h(this.pos.x,this.pos.y),s=new h(this.pos.x,this.pos.y+14));const i=new l(t,e,o.Basic);this.bullets.push(i);const n=new l(s,e,o.Basic);this.bullets.push(n)}this.stats.recharged=0}update(e){this.stats.recharged+=e,this.bullets.forEach((t=>{t.update(e)}))}}class c extends d{constructor(e){super(e,"player"),this.stats=new a,this.bullets=[],this.recharged=0,this.isDisembarked=!1,this.size=new h(16,16),this.pos=e,this.stats.health=50,this.speed=2}move(e){if(i.moveDisabled)return;const t=this.pos.clone(),s=this.pos.clone().add(e.mul(new h(this.speed,this.speed)));this.isOutOfParent(s)||(this.pos=s,s.x<=50&&(this.pos=t,this.parent.pos.x+=this.speed),s.y<=50&&(this.pos=t,this.parent.pos.y+=this.speed),s.clone().add(new h(this.size.x,0)).x>=i.game.renderer.windowSize.width-50&&(this.pos=t,this.parent.pos.x-=this.speed),s.clone().add(new h(0,this.size.y)).y>=i.game.renderer.windowSize.height-50&&(this.pos=t,this.parent.pos.y-=this.speed))}render(e){e.ctx.save(),e.drawSprite(0,24,16,16,this.pos.x,this.pos.y,16,16),this.bullets.forEach((t=>{t.render(e)})),this.bullets=this.bullets.filter((t=>{return s=t,i=e.canvas.width,h=e.canvas.height,!(s.pos.x<0||s.pos.x>i||s.pos.y<0||s.pos.y>h);var s,i,h})),this.debugDraw(e),e.ctx.restore()}}const p=[{id:"grass",collision:!1},{id:"grass2",coliision:!1},{id:"grass3",collision:!0}];class w extends n{constructor(e,t){super(),this.player=t,this.map=[],this.size=e.size,this.pos=e.pos,this.map=e.map(),this.addChild(t),this.map.forEach(((e,t)=>{this.map[t]=Math.trunc(Math.random()*p.length)}))}getTile(e){const t=Math.trunc(e.x/8),s=Math.trunc(e.y/8),i=this.map[t+s*(this.size.x/8)];if(i)return p[i]}update(e){this.getTile(this.player.pos)?.collision,i.moveDisabled=!1,this.pos.x+this.size.x<0||this.pos.y+this.size.y<0||this.pos.x>i.windowResolution.width||this.pos.y>i.windowResolution.height||this.children.forEach((t=>{t.update(e)}))}renderMap(e){const t=16;for(let s=0;s<this.size.x/t;s++)for(let n=0;n<this.size.y/t;n++){const r=p[this.map[s+n*(this.size.x/t)]];s*t+this.pos.x>i.windowResolution.width||n*t+this.pos.y>i.windowResolution.height||s*t+this.pos.x+t<0||n*t+this.pos.y+t<0||e.drawTile(r.id,new h(this.pos.x+s*t,this.pos.y+n*t))}}render(e){this.renderMap(e),this.player?.render(e),this.children.forEach((t=>{t.render(e)})),this.debugDraw(e)}}const y={size:new h(512,160),pos:new h(-0,-0),map:function(){return Array(this.size.x*this.size.y).fill(0)}};class u extends n{constructor(){super(),this.player=new c(new h(i.windowResolution.width/2-16,i.windowResolution.height/2-16)),this.scene=new w(y,this.player);for(let e=0;e<10;e++){const t=new d(new h(100*Math.random(),100*Math.random()),`enemy_${e}`);t.id="enemy",this.scene.addChild(t)}}update(e){this.scene?.update(e)}addScene(e){this.scene=e}render(e){this.scene?.render(e)}}class g{error(e){console.error(e)}warn(e){console.warn(e)}info(e){console.info("ℹ️ "+e)}debug(e){console.log("📝 "+e)}}class x{constructor(){this.logger=new g,this.image=new Image,this.windowSize={width:i.windowResolution.width,height:i.windowResolution.height},this.spriteSheetMap={},this.canvas=document.createElement("canvas"),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.ctx=this.canvas.getContext("2d"),this.ctx.imageSmoothingEnabled=!1,this.ctx.scale(this.canvas.width/this.windowSize.width,this.canvas.height/this.windowSize.height),document.querySelector("#main").append(this.canvas),this.logger.info("Renderer initialized"),window.addEventListener("resize",(()=>this.resize()))}resize(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.ctx.scale(this.canvas.width/this.windowSize.width,this.canvas.height/this.windowSize.height),this.ctx.imageSmoothingEnabled=!1}drawTile(e,t){const{x:s,y:i,w:h,h:n}=this.spriteSheetMap[e];this.drawSprite(s,i,h,n,t.x,t.y,h+1,n+1)}drawSprite(e,t,s,i,h,n,r,o){this.ctx.drawImage(this.image,e,t,s,i,h,n,r,o)}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}}const m="#000000",f="#ffffff",v="#49aa10",S="#b21030";class z extends x{progress(e,t,s,i=10,h=4){this.ctx.fillStyle=f,this.ctx.fillRect(t-2,s-2,i+4,h+4),this.ctx.fillStyle=f,this.ctx.fillRect(t+i+2,s+1,1,2),this.ctx.fillStyle=m,this.ctx.fillRect(t-1,s-1,i+2,h+2),this.ctx.fillStyle=S,this.ctx.fillRect(t,s,i,4),this.ctx.fillStyle=v,this.ctx.fillRect(t,s,e/i,4)}text(e,t,s){e.split("").forEach(((e,t)=>{this.ctx.drawImage(this.image,this.spriteSheetMap[e].x,this.spriteSheetMap[e].y,this.spriteSheetMap[e].w,this.spriteSheetMap[e].h,8*t,0,8,8)}))}}var D;!function(e){e[e.MENU=0]="MENU",e[e.PLAYING=1]="PLAYING",e[e.PAUSED=2]="PAUSED",e[e.GAME_OVER=3]="GAME_OVER",e[e.OPTIONS=4]="OPTIONS",e[e.LOADING=5]="LOADING",e[e.FLYING=6]="FLYING",e[e.DISEMBARK=7]="DISEMBARK"}(D||(D={}));const I=new class{constructor(){this.renderer=new x,this.uiRenderer=new z,this.assetLoader=new e,this.level=new u,this.currentState=D.DISEMBARK,this.lastTime=0,this.logger=new g,this.logger.info("Game started"),this.controller=new s(this),window.game=this}update(e){const t=e-this.lastTime;if(this.currentState===D.FLYING)return this.level.player.move(new h(0,-1)),this.controller.keyIsDown("KeyA")&&this.level.player.move(new h(-1,0)),this.controller.keyIsDown("KeyD")&&this.level.player.move(new h(1,0)),this.controller.keyIsDown("Space")&&this.level.player.fire(new h(0,-1),t),!1;this.controller.keyIsDown("KeyA")&&this.level.player.move(new h(-1,0)),this.controller.keyIsDown("KeyD")&&this.level.player.move(new h(1,0)),this.controller.keyIsDown("KeyW")&&this.level.player.move(new h(0,-1)),this.controller.keyIsDown("KeyS")&&this.level.player.move(new h(0,1)),this.controller.keyIsDown("KeyI")&&this.level.player.fire(new h(0,-1),t),this.controller.keyIsDown("KeyJ")&&this.level.player.fire(new h(-1,0),t),this.controller.keyIsDown("KeyK")&&this.level.player.fire(new h(0,1),t),this.controller.keyIsDown("KeyL")&&this.level.player.fire(new h(1,0),t),this.lastTime=e,this.level.update(t)}changeState(e){this.currentState=e}render(){this.renderer.clear(),this.uiRenderer.clear(),this.uiRenderer.progress(this.level.player.stats.health,this.renderer.windowSize.width-28,8),this.level.render(this.renderer)}run(){this.logger.info("Game running"),this.assetLoader.load(["assets/spritesheet.png","assets/spritesheet_map.json"]).then((()=>{this.logger.info("Assets loaded"),this.renderer.image=this.assetLoader.list.spritesheet,this.renderer.spriteSheetMap=this.assetLoader.list.spritesheet_map,this.uiRenderer.image=this.assetLoader.list.spritesheet,this.uiRenderer.spriteSheetMap=this.assetLoader.list.spritesheet_map,i.game=this,this.loop()}))}loop(){this.update(performance.now()),this.render(),requestAnimationFrame((()=>this.loop()))}};I.run()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,