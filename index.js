(()=>{"use strict";class e{constructor(){this.toLoad=0,this.loaded=0,this.isLoaded=!1,this.list={}}load(e){const t=["png"],s=["json"],i=["toml"];return this.toLoad=e.length,new Promise((h=>{e.forEach((e=>{const n=e.split(".").pop()||"";t.includes(n)?this.loadImage(e,h):s.includes(n)?this.loadJson(e,h):i.includes(n)&&this.loadConfig(e,h)}))}))}loadHandler(e){this.loaded+=1,this.loaded===this.toLoad&&(this.loaded=0,this.toLoad=0,e(this),this.isLoaded=!0)}loadImage(e,t){const s=new Image;s.src=e,s.addEventListener("load",(()=>{this.loadHandler(t)}),!1);const i=e.split("/").pop().split(".")[0];i&&(this.list[i]=s)}async loadConfig(e,t){fetch(e).then((e=>e.text())).then((t=>{const s=t.split("\n").reduce(((e,t)=>{const[s,i]=t.trim().split("=");return s&&i?(e[s.trim()]=i.trim(),e):e}),{}),i=e.split("/").pop().split(".")[0];i&&(this.list[i]=s)}))}async loadJson(e,t){try{const s=await fetch(e),i=await s.json();this.loadHandler(t);const h=e.split("/").pop().split(".")[0];this.list[h]=i}catch(e){}}}class t{constructor(e){this.keys={},console.log("Controller created"),window.addEventListener("keydown",(t=>this.handleKeyDown(t,e))),window.addEventListener("keyup",(t=>this.handleKeyUp(t,e)))}handleKeyDown(e,t){switch(this.keys[e.code]=!0,e.code){case"KeyW":e.preventDefault(),t.vel.y=-1;break;case"KeyS":e.preventDefault(),t.vel.y=1;break;case"KeyA":t.vel.x=-1,e.preventDefault();break;case"KeyD":t.vel.x=1,e.preventDefault();break;case"Space":e.preventDefault(),t.fire();break;default:e.preventDefault()}console.log(this.keys)}handleKeyUp(e,t){this.keys[e.code]=!1,delete this.keys[e.code],this.keys.KeyW||this.keys.KeyS||this.keys.KeyA||this.keys.KeyD||(console.log(this.keys),t.vel.reset())}}class s{error(e){console.error(e)}warn(e){console.warn(e)}info(e){console.info("ℹ️ "+e)}debug(e){console.log("📝 "+e)}}class i{constructor(e,t){this.x=e,this.y=t}add(e){return this.x+=e.x,this.y+=e.y,this}sub(e){return this.x-=e.x,this.y-=e.y,this}mul(e){return this.x*=e.x,this.y*=e.y,this}div(e){return this.x/=e.x,this.y/=e.y,this}clone(){return new i(this.x,this.y)}reset(){return this.x=0,this.y=0,this}}class h{constructor(){this.pos=new i(0,0),this.vel=new i(0,0),this.size=new i(8,8),this.rotation=0,this.speed=1}}class n{constructor(){this.health=100,this.exp=0,this.level=1,this.damage=10,this.speed=1,this.defense=1}}class a extends h{constructor(e,t,s=1){super(),this.pos=e,this.vel=t,this.speed=s}update(e){this.pos.add(this.vel.clone().mul(new i(this.speed,this.speed)))}render(e){e.ctx.fillStyle="white",e.ctx.fillRect(this.pos.x,this.pos.y,2,2)}}class o extends h{constructor(){super(),this.stats=new n,this.bullets=[]}fire(){const e=new i(this.pos.x+this.size.x/2,this.pos.y+this.size.y/2),t=new a(e,new i(0,-1),2);this.bullets.push(t)}update(e){this.pos.add(this.vel),this.bullets.forEach((t=>{t.update(e)}))}render(e){e.drawSprite(0,24,16,16,this.pos.x,this.pos.y,16,16),this.bullets.forEach((t=>{t.render(e)})),this.bullets=this.bullets.filter((t=>{if(s=t,i=e.canvas.width,h=e.canvas.height,!(s.pos.x<0||s.pos.x>i||s.pos.y<0||s.pos.y>h))return t;var s,i,h}))}}class r{constructor(){this.logger=new s,this.image=new Image,this.windowSize={width:256,height:240},this.canvas=document.createElement("canvas"),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.ctx=this.canvas.getContext("2d"),this.ctx.imageSmoothingEnabled=!1,this.ctx.scale(this.canvas.width/this.windowSize.width,this.canvas.height/this.windowSize.height),document.querySelector("#main").append(this.canvas),this.logger.info("Renderer initialized"),window.addEventListener("resize",(()=>this.resize()))}resize(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.ctx.scale(this.canvas.width/this.windowSize.width,this.canvas.height/this.windowSize.height),this.ctx.imageSmoothingEnabled=!1}drawSprite(e,t,s,i,h,n,a,o){this.ctx.drawImage(this.image,e,t,s,i,h,n,a,o)}drawText(e,t,s){e.split("").forEach(((e,i)=>{this.ctx.drawImage(t,s[e].x,s[e].y,s[e].w,s[e].h,8*i,0,8,8)}))}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}}var l;!function(e){e[e.MENU=0]="MENU",e[e.PLAYING=1]="PLAYING",e[e.PAUSED=2]="PAUSED",e[e.GAME_OVER=3]="GAME_OVER",e[e.OPTIONS=4]="OPTIONS",e[e.LOADING=5]="LOADING"}(l||(l={}));(new class{constructor(){this.renderer=new r,this.assetLoader=new e,this.lastTime=0,this.logger=new s,this.logger.info("Game started"),this.player=new o,this.controller=new t(this.player),window.game=this}update(e){const t=e-this.lastTime;this.lastTime=e,this.player.update(t)}render(){this.renderer.clear(),this.renderer.drawText("SPACE SHOOTER GAIDEN V0.1",this.assetLoader.list.spritesheet,this.assetLoader.list.spritesheet_map),this.player.render(this.renderer)}run(){this.logger.info("Game running"),this.assetLoader.load(["assets/spritesheet.png","assets/spritesheet_map.json"]).then((()=>{this.logger.info("Assets loaded"),this.renderer.image=this.assetLoader.list.spritesheet,this.loop()}))}loop(){this.update(performance.now()),this.render(),requestAnimationFrame((()=>this.loop()))}}).run()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,