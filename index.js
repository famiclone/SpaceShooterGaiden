(()=>{"use strict";class t{constructor(){this.toLoad=0,this.loaded=0,this.isLoaded=!1,this.list={}}load(t){const e=["png"],s=["json"],i=["toml"];return this.toLoad=t.length,new Promise((h=>{t.forEach((t=>{const r=t.split(".").pop()||"";e.includes(r)?this.loadImage(t,h):s.includes(r)?this.loadJson(t,h):i.includes(r)&&this.loadConfig(t,h)}))}))}loadHandler(t){this.loaded+=1,this.loaded===this.toLoad&&(this.loaded=0,this.toLoad=0,t(this),this.isLoaded=!0)}loadImage(t,e){const s=new Image;s.src=t,s.addEventListener("load",(()=>{this.loadHandler(e)}),!1);const i=t.split("/").pop().split(".")[0];i&&(this.list[i]=s)}async loadConfig(t,e){fetch(t).then((t=>t.text())).then((e=>{const s=e.split("\n").reduce(((t,e)=>{const[s,i]=e.trim().split("=");return s&&i?(t[s.trim()]=i.trim(),t):t}),{}),i=t.split("/").pop().split(".")[0];i&&(this.list[i]=s)}))}async loadJson(t,e){try{const s=await fetch(t),i=await s.json();this.loadHandler(e);const h=t.split("/").pop().split(".")[0];this.list[h]=i}catch(t){}}}const e=["KeyW","KeyA","KeyS","KeyD","Space","Escape","KeyI","KeyJ","KeyK","KeyL","Enter"];class s{constructor(){this.keys={},console.log("Controller created"),window.addEventListener("keydown",(t=>this.handleKeyDown(t))),window.addEventListener("keyup",(t=>this.handleKeyUp(t)))}handleKeyDown(t){e.includes(t.code)&&(t.preventDefault(),this.keys[t.code]=1)}handleKeyUp(t){this.keys[t.code]=0}keyIsDown(t){return this.keys[t]}clearKeys(){this.keys={}}}class i{error(t){console.error(t)}warn(t){console.warn(t)}info(t){console.info("ℹ️ "+t)}debug(t){console.log("📝 "+t)}}const h={game:null,moveDisabled:!1,debug:!1,windowResolution:{width:255,height:240}};class r{constructor(){this.logger=new i,this.image=new Image,this.windowSize={width:h.windowResolution.width,height:h.windowResolution.height},this.spriteSheetMap={},this.canvas=document.createElement("canvas"),this.canvas.width=765,this.canvas.height=720,this.ctx=this.canvas.getContext("2d"),this.ctx.imageSmoothingEnabled=!1,this.ctx.scale(this.canvas.width/this.windowSize.width,this.canvas.height/this.windowSize.height),document.querySelector("#main").append(this.canvas),this.logger.info("Renderer initialized"),window.addEventListener("resize",(()=>this.resize()))}resize(){this.canvas.width=765,this.canvas.height=720,this.ctx.scale(this.canvas.width/this.windowSize.width,this.canvas.height/this.windowSize.height),this.ctx.imageSmoothingEnabled=!1}drawTile(t,e){const{x:s,y:i,w:h,h:r}=this.spriteSheetMap[t];this.drawSprite(s,i,h,r,e.x,e.y,h+1,r+1)}drawSprite(t,e,s,i,h,r,a,n){this.ctx.drawImage(this.image,t,e,s,i,h,r,a,n)}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}}class a{constructor(t,e){this.x=t,this.y=e}add(t){return this.x+=t.x,this.y+=t.y,this}sub(t){return this.x-=t.x,this.y-=t.y,this}mul(t){return this.x*=t.x,this.y*=t.y,this}div(t){return this.x/=t.x,this.y/=t.y,this}clone(){return new a(this.x,this.y)}reset(){return this.x=0,this.y=0,this}}class n{constructor(t,e){this.pos=new a(0,0),this.globalPos=new a(0,0),this.vel=new a(0,0),this.size=new a(8,8),this.rotation=0,this.spriteDirection=new a(0,0),this.speed=1,this.children=[],this.parent=null,this.frame=0,this.lastTime=0,this.id=Math.random().toString(16).substring(0,5),this.pos=t.clone().add(this.parent?.pos||new a(0,0)),this.id=e}addChild(t){this.children.includes(t)||(t.parent&&t.parent.removeChild(t),t.parent=this,this.children.push(t))}removeChild(t){t.parent=null,this.children=this.children.filter((e=>e!==t))}debugDraw(t,e=!1){h.debug&&(t.ctx.strokeStyle="magenta",t.ctx.strokeRect(this.pos.x,this.pos.y,this.size.x,this.size.y),e&&(t.ctx.strokeStyle="green",t.ctx.font="8px monospace",t.ctx.strokeText(this.id,this.pos.x,this.pos.y-4)))}update(t){this.children.forEach((e=>{e.update(t)}))}render(t){this.children.forEach((e=>{e.render(t)})),this.debugDraw(t)}isOutOfParent(t){return t.clone().add(new a(this.size.x,0)).x>=this.parent.size.x+this.parent.pos.x||t.clone().add(new a(0,this.size.y)).y>=this.parent.size.y+this.parent.pos.y||t.x<=this.parent.pos.x||t.y<=this.parent.pos.y}}function o(...t){return l.play(...t)}const l={volume:.3,sampleRate:44100,x:new(window.AudioContext||webkitAudioContext),play:function(...t){return this.playSamples(this.buildSamples(...t))},playSamples:function(...t){const e=this.x.createBuffer(t.length,t[0].length,this.sampleRate),s=this.x.createBufferSource();return t.map(((t,s)=>e.getChannelData(s).set(t))),s.buffer=e,s.connect(this.x.destination),s.start(),s},buildSamples:function(t=1,e=.05,s=220,i=0,h=0,r=.1,a=0,n=1,o=0,l=0,c=0,d=0,p=0,w=0,u=0,m=0,y=0,g=1,x=0,f=0){const S=2*Math.PI;let v,D,E=this.sampleRate,I=o*=500*S/E/E,k=s*=(1+2*e*Math.random()-e)*S/E,z=[],R=0,T=0,M=0,b=1,K=0,L=0,A=0;for(l*=500*S/E**3,u*=S/E,c*=S/E,d*=E,p=p*E|0,D=(i=i*E+9)+(x*=E)+(h*=E)+(r*=E)+(y*=E)|0;M<D;z[M++]=A)++L%(100*m|0)||(A=a?a>1?a>2?a>3?Math.sin((R%S)**3):Math.max(Math.min(Math.tan(R),1),-1):1-(2*R/S%2+2)%2:1-4*Math.abs(Math.round(R/S)-R/S):Math.sin(R),A=(p?1-f+f*Math.sin(S*M/p):1)*(A>0?1:-1)*Math.abs(A)**n*t*this.volume*(M<i?M/i:M<i+x?1-(M-i)/x*(1-g):M<i+x+h?g:M<D-y?(D-M-y)/r*g:0),A=y?A/2+(y>M?0:(M<D-y?1:(D-M)/y)*z[M-y|0]/2):A),v=(s+=o+=l)*Math.cos(u*T++),R+=v-v*w*(1-1e9*(Math.sin(M)+1)%2),b&&++b>d&&(s+=c,k+=c,b=0),!p||++K%p||(s=k,o=I,b=b||1);return z},getNote:function(t=0,e=440){return e*2**(t/12)}},c={basic:{damage:10,speed:.5,color:"red",size:[2,2],rechargeTime:500}};var d,p;!function(t){t.Basic="basic"}(d||(d={}));class w{constructor(){this.health=100,this.exp=0,this.level=1,this.damage=10,this.speed=1,this.defense=1,this.recharged=0}}class u extends n{constructor(t,e,s){super(t,"bullet"),this.pos=t,this.vel=e,this.type=s,this.size=new a(c[this.type].size[0],c[this.type].size[1])}update(t){this.pos.add(this.vel.clone().mul(new a(c[this.type].speed*t,c[this.type].speed*t)))}render(t){t.ctx.save(),this.debugDraw(t),t.ctx.fillStyle=c[this.type].color,t.ctx.fillRect(this.pos.x,this.pos.y,2,2),t.ctx.restore()}}!function(t){t.IDLE="IDLE",t.WALK="WALK",t.ATTACK="ATTACK",t.HIT="HIT",t.DIE="DIE"}(p||(p={}));class m extends n{constructor(t,e){super(t,e),this.stats=new w,this.bullets=[],this.prevPos=new a(0,0),this.wasShot=!1,this.action=p.IDLE,this.id=e}move(t){this.prevPos=this.pos.clone(),this.pos.add(t)}fire(t,e){if(this.action=p.ATTACK,this.stats.recharged>c.basic.rechargeTime){let e=new a(this.pos.x,this.pos.y+16),s=new a(this.pos.x+14,this.pos.y+16);this.wasShot=!0,this.spriteDirection=t.clone(),0===t.y&&(e=new a(this.pos.x,this.pos.y),s=new a(this.pos.x,this.pos.y+14));const i=new u(e,t,d.Basic);this.bullets.push(i);const h=new u(s,t,d.Basic);this.bullets.push(h),o(...[,,537,.02,.02,.22,1,1.59,-6.98,4.97]),this.stats.recharged=0}this.wasShot=!1}update(t){this.stats.recharged+=t,this.lastTime+=t,this.bullets.forEach((e=>{e.update(t)})),this.lastTime>300&&(this.frame+=1,this.frame>3&&(this.frame=0),this.lastTime=0)}}class y extends m{constructor(t){super(t,"player"),this.stats=new w,this.bullets=[],this.recharged=0,this.isDisembarked=!1,this.size=new a(16,16),this.pos=t,this.prevPos=t,this.stats.health=50,this.speed=1.8}move(t){this.action=p.WALK,this.prevPos=this.pos.clone(),this.spriteDirection=t.clone();const e=this.pos.clone().add(t.mul(new a(this.speed,this.speed)));this.isOutOfParent(e)||(this.pos=e,e.x<=50&&(this.pos=this.prevPos,this.parent.pos.x+=this.speed),e.y<=50&&(this.pos=this.prevPos,this.parent.pos.y+=this.speed),e.clone().add(new a(this.size.x,0)).x>=h.game.renderer.windowSize.width-50&&(this.pos=this.prevPos,this.parent.pos.x-=this.speed),e.clone().add(new a(0,this.size.y)).y>=h.game.renderer.windowSize.height-50&&(this.pos=this.prevPos,this.parent.pos.y-=this.speed))}render(t){let e="DOWN";this.spriteDirection.x>0?e="RIGHT":this.spriteDirection.x<0?e="LEFT":this.spriteDirection.y>0?e="DOWN":this.spriteDirection.y<0&&(e="UP"),this.wasShot&&(this.spriteDirection.x>0&&(e="RIGHT"),this.spriteDirection.x<0&&(e="LEFT"),this.spriteDirection.y>0&&(e="DOWN"),this.spriteDirection.y<0&&(e="UP"));const s=t.spriteSheetMap[`PLAYER_${this.action===p.ATTACK?p.IDLE:this.action}_${e}`].frames[this.frame];console.log(this.frame),t.ctx.save(),t.drawSprite(s.x,s.y,s.w,s.h,this.pos.x,this.pos.y,16,16),this.bullets.forEach((e=>{e.render(t)})),this.bullets=this.bullets.filter((e=>{return s=e,i=t.canvas.width,h=t.canvas.height,!(s.pos.x<0||s.pos.x>i||s.pos.y<0||s.pos.y>h);var s,i,h})),this.debugDraw(t),t.ctx.restore()}}const g=[{id:"grass",collision:!1},{id:"grass2",coliision:!1},{id:"grass3",collision:!0}];class x extends n{constructor(t,e){super(t.pos,"scene"),this.player=e,this.map=[],this.size=t.size,this.pos=t.pos,this.map=t.map(),this.addChild(e),this.map.forEach(((t,e)=>{this.map[e]=Math.trunc(Math.random()*g.length)}))}getTile(t){return g[this.map[Math.trunc(t.x/16)+Math.trunc(t.y/16)*(this.size.x/16)]]}update(t){this.pos.x+this.size.x<0||this.pos.y+this.size.y<0||this.pos.x>h.windowResolution.width||this.pos.y>h.windowResolution.height||this.children.forEach((e=>{e.update(t)}))}renderMap(t){const e=16;for(let s=0;s<this.size.x/e;s++)for(let i=0;i<this.size.y/e;i++){const r=g[this.map[s+i*(this.size.x/e)]];if(s*e+this.pos.x>h.windowResolution.width||i*e+this.pos.y>h.windowResolution.height||s*e+this.pos.x+e<0||i*e+this.pos.y+e<0)continue;const n=new a(this.pos.x+s*e,this.pos.y+i*e);t.drawTile(r.id,n)}}render(t){this.renderMap(t),this.player?.render(t),this.children.forEach((e=>{e.render(t)})),this.debugDraw(t)}}const f={size:new a(320,320),pos:new a(-0,-0),map:function(){return Array(this.size.x*this.size.y).fill(0)}};class S extends n{constructor(){super(new a(0,0),"level"),this.player=new y(new a(h.windowResolution.width/2-16,h.windowResolution.height/2-16)),this.scene=new x(f,this.player);for(let t=0;t<10;t++){const e=new m(new a(this.pos.x+100*Math.random(),this.pos.y+100*Math.random()),`enemy_${t}`);e.id="enemy",this.scene.addChild(e)}}update(t){this.scene?.update(t)}addScene(t){this.scene=t}render(t){this.scene?.render(t)}}const v="#000000",D="#ffffff",E="#49aa10",I="#b21030";class k extends r{progress(t,e,s,i=10,h=4){this.ctx.fillStyle=D,this.ctx.fillRect(e-2,s-2,i+4,h+4),this.ctx.fillStyle=D,this.ctx.fillRect(e+i+2,s+1,1,2),this.ctx.fillStyle=v,this.ctx.fillRect(e-1,s-1,i+2,h+2),this.ctx.fillStyle=I,this.ctx.fillRect(e,s,i,4),this.ctx.fillStyle=E,this.ctx.fillRect(e,s,t/i,4)}text(t,e,s,i=!1){i?Math.floor(Date.now()/300)%2==0&&t.split("").forEach(((t,i)=>{this.ctx.drawImage(this.image,this.spriteSheetMap[t].x,this.spriteSheetMap[t].y,this.spriteSheetMap[t].w,this.spriteSheetMap[t].h,8*i+e,s,8,8)})):t.split("").forEach(((t,i)=>{this.ctx.drawImage(this.image,this.spriteSheetMap[t].x,this.spriteSheetMap[t].y,this.spriteSheetMap[t].w,this.spriteSheetMap[t].h,8*i+e,s,8,8)}))}}class z{constructor(t){this.game=t}update(t){}render(t){}renderUI(t){}}class R extends z{constructor(t){super(t)}update(t){this.game.controller.keyIsDown("Enter")&&(this.game.stateStack.pop(),this.game.stateStack.push(new T(this.game,{r:0,g:0,b:0},1e3)))}render(){this.game.uiRenderer.text("SPACE SHOOTER GAIDEN",45,30),this.game.uiRenderer.text("PRESS ENTER",80,120,!0),this.game.uiRenderer.text("WASD - MOVE, IJKL - FIRE",30,220)}}class T extends z{constructor(t,e,s){super(t),this.color=e,this.time=s,this.lastTime=0,this.aplha=0}update(t){this.lastTime+=t,this.lastTime>this.time&&o(...[1.66,,322,.05,.24,.19,,.5,,-22,935,.41,.35,.1,,,.22,.77]),this.lastTime>this.time/3?this.aplha=1:this.aplha=this.lastTime/(this.time/3),this.lastTime>this.time/3*2&&(this.aplha=1-(this.lastTime-this.time/3*2)/(this.time/3)),this.lastTime>this.time&&(this.game.stateStack.pop(),this.game.stateStack.push(new b(this.game)))}render(){this.game.renderer.ctx.fillStyle=`rgb(${this.color.r}, ${this.color.g}, ${this.color.b}, ${this.aplha})`,this.game.renderer.ctx.fillRect(0,0,this.game.renderer.windowSize.width,this.game.renderer.windowSize.height)}}class M extends z{constructor(t){super(t)}update(t){this.game.controller.keyIsDown("Escape")&&this.game.stateStack.pop()}render(){this.game.uiRenderer.text("MENU",80,30)}}class b extends z{constructor(t){super(t),this.level=new S,this.renderer=new r,this.uiRenderer=new k}update(t){this.game.controller.keyIsDown("KeyA")&&this.level.player.move(new a(-1,0)),this.game.controller.keyIsDown("KeyD")&&this.level.player.move(new a(1,0)),this.game.controller.keyIsDown("KeyW")&&this.level.player.move(new a(0,-1)),this.game.controller.keyIsDown("KeyS")&&this.level.player.move(new a(0,1)),this.game.controller.keyIsDown("KeyI")&&this.level.player.fire(new a(0,-1),t),this.game.controller.keyIsDown("KeyJ")&&this.level.player.fire(new a(-1,0),t),this.game.controller.keyIsDown("KeyK")&&this.level.player.fire(new a(0,1),t),this.game.controller.keyIsDown("KeyL")&&this.level.player.fire(new a(1,0),t),this.game.controller.keyIsDown("Escape")&&this.game.stateStack.push(new M(this.game)),this.game.controller.keyIsDown("KeyW")||this.game.controller.keyIsDown("KeyS")||this.game.controller.keyIsDown("KeyA")||this.game.controller.keyIsDown("KeyD")||(this.level.player.action=p.IDLE),this.level.update(t)}render(t){this.game.uiRenderer.progress(this.level.player.stats.health,this.game.renderer.windowSize.width-28,8),this.level.render(this.game.renderer)}}class K{constructor(){this.states=[]}clear(){this.states=[]}update(t){0!==this.states.length&&this.states.at(-1).update(t)}render(t){this.states.forEach((e=>{e.render(t)}))}push(t){this.states.push(t)}pop(){this.states.pop()}}(new class{constructor(){this.lastTime=0,this.setTitle("SpaceShooterGaiden"),this.logger=new i,this.controller=new s,this.stateStack=new K,this.renderer=new r,this.uiRenderer=new k,this.assetLoader=new t,window.game=this}update(t){const e=t-this.lastTime;this.lastTime=t,this.stateStack.update(e)}setTitle(t){document.title=t}render(){this.renderer.clear(),this.uiRenderer.clear(),this.stateStack.render(this.renderer)}run(){this.logger.info("Game running"),this.assetLoader.load(["assets/spritesheet.png","assets/spritesheet_map.json"]).then((()=>{this.logger.info("Assets loaded"),this.renderer.image=this.assetLoader.list.spritesheet,this.renderer.spriteSheetMap=this.assetLoader.list.spritesheet_map,this.uiRenderer.image=this.assetLoader.list.spritesheet,this.uiRenderer.spriteSheetMap=this.assetLoader.list.spritesheet_map,this.stateStack.push(new R(this)),h.game=this,this.loop()}))}loop(){this.update(performance.now()),this.render(),requestAnimationFrame((()=>this.loop()))}}).run()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,