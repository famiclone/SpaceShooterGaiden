(()=>{"use strict";class t{constructor(){this.toLoad=0,this.loaded=0,this.isLoaded=!1,this.list={}}load(t){const e=["png"],s=["json"],i=["toml"];return this.toLoad=t.length,new Promise((h=>{t.forEach((t=>{const n=t.split(".").pop()||"";e.includes(n)?this.loadImage(t,h):s.includes(n)?this.loadJson(t,h):i.includes(n)&&this.loadConfig(t,h)}))}))}loadHandler(t){this.loaded+=1,this.loaded===this.toLoad&&(this.loaded=0,this.toLoad=0,t(this),this.isLoaded=!0)}loadImage(t,e){const s=new Image;s.src=t,s.addEventListener("load",(()=>{this.loadHandler(e)}),!1);const i=t.split("/").pop().split(".")[0];i&&(this.list[i]=s)}async loadConfig(t,e){fetch(t).then((t=>t.text())).then((e=>{const s=e.split("\n").reduce(((t,e)=>{const[s,i]=e.trim().split("=");return s&&i?(t[s.trim()]=i.trim(),t):t}),{}),i=t.split("/").pop().split(".")[0];i&&(this.list[i]=s)}))}async loadJson(t,e){try{const s=await fetch(t),i=await s.json();this.loadHandler(e);const h=t.split("/").pop().split(".")[0];this.list[h]=i}catch(t){}}}const e=["KeyW","KeyA","KeyS","KeyD","Space","Escape"];class s{constructor(t){this.keys={},console.log("Controller created"),this.game=t,this.player=t.player,window.addEventListener("keydown",(t=>this.handleKeyDown(t))),window.addEventListener("keyup",(t=>this.handleKeyUp(t)))}handleKeyDown(t){e.includes(t.code)&&(t.preventDefault(),this.keys[t.code]=1)}handleKeyUp(t){this.keys[t.code]=0,console.log(this.keys)}keyIsDown(t){return 1===this.keys[t]||!1}clearKeys(){this.keys={}}}class i{error(t){console.error(t)}warn(t){console.warn(t)}info(t){console.info("ℹ️ "+t)}debug(t){console.log("📝 "+t)}}class h{constructor(t,e){this.x=t,this.y=e}add(t){return this.x+=t.x,this.y+=t.y,this}sub(t){return this.x-=t.x,this.y-=t.y,this}mul(t){return this.x*=t.x,this.y*=t.y,this}div(t){return this.x/=t.x,this.y/=t.y,this}clone(){return new h(this.x,this.y)}reset(){return this.x=0,this.y=0,this}}class n{constructor(){this.pos=new h(0,0),this.globalPos=new h(0,0),this.vel=new h(0,0),this.size=new h(8,8),this.rotation=0,this.speed=1,this.children=[],this.parent=null,this.id=Math.random().toString(16).substring(0,5)}addChild(t){this.children.includes(t)||(t.parent&&t.parent.removeChild(t),t.parent=this,this.children.push(t))}removeChild(t){t.parent=null,this.children=this.children.filter((e=>e!==t))}debugDraw(t,e=!1){t.ctx.strokeStyle="magenta",t.ctx.strokeRect(this.pos.x,this.pos.y,this.size.x,this.size.y),e&&(t.ctx.strokeStyle="green",t.ctx.font="8px monospace",t.ctx.strokeText(this.id,this.pos.x,this.pos.y-4))}update(t){this.children.forEach((e=>{e.update(t)}))}render(t){this.children.forEach((e=>{e.render(t)})),this.debugDraw(t)}}class o{constructor(){this.health=100,this.exp=0,this.level=1,this.damage=10,this.speed=1,this.defense=1}}const r={game:null,moveDisabled:!1};const a={basic:{damage:10,speed:5,color:"red",size:[2,2]}};var l;!function(t){t.Basic="basic"}(l||(l={}));class d extends n{constructor(t,e,s){super(),this.pos=t,this.vel=e,this.type=s,this.size=new h(a[this.type].size[0],a[this.type].size[1]),this.id="player-bullet"}update(t){this.pos.add(this.vel.clone().mul(new h(a[this.type].speed,a[this.type].speed)))}render(t){this.debugDraw(t),t.ctx.fillStyle=a[this.type].color,t.ctx.fillRect(this.pos.x,this.pos.y,2,2)}}class c extends n{constructor(){super(),this.stats=new o,this.bullets=[],this.id="player",this.size=new h(16,16),this.pos=new h(127.5-this.size.x,120-this.size.y),this.stats.health=50,this.speed=2}fire(){const t=new h(this.pos.x,this.pos.y+16),e=new h(this.pos.x+14,this.pos.y+16),s=new d(t,new h(0,-1),l.Basic);this.bullets.push(s);const i=new d(e,new h(0,-1),l.Basic);this.bullets.push(i),console.log(this.bullets)}move(t){if(r.moveDisabled)return;const e=this.pos.clone(),s=this.pos.clone().add(t.mul(new h(this.speed,this.speed)));s.clone().add(new h(this.size.x,50)).x>=this.parent.size.x+this.parent.pos.x||s.clone().add(new h(0,this.size.y)).y>=this.parent.size.y+this.parent.pos.y||s.x<=this.parent.pos.x||s.y<=this.parent.pos.y||(this.pos=s,s.x<=50&&(this.pos=e,this.parent.pos.x+=this.speed),s.y<=50&&(this.pos=e,this.parent.pos.y+=this.speed),s.clone().add(new h(this.size.x,0)).x>=r.game.renderer.windowSize.width-50&&(this.pos=e,this.parent.pos.x-=this.speed),s.clone().add(new h(0,this.size.y)).y>=r.game.renderer.windowSize.height-50&&(this.pos=e,this.parent.pos.y-=this.speed))}update(t){this.bullets.forEach((e=>{e.update(t)}))}render(t){t.drawSprite(0,24,16,16,this.pos.x,this.pos.y,16,16),this.bullets.forEach((e=>{e.render(t)})),this.bullets=this.bullets.filter((e=>{return s=e,i=t.canvas.width,h=t.canvas.height,!(s.pos.x<0||s.pos.x>i||s.pos.y<0||s.pos.y>h);var s,i,h})),this.debugDraw(t)}}class p{constructor(){this.logger=new i,this.image=new Image,this.windowSize={width:256,height:240},this.spriteSheetMap={},this.canvas=document.createElement("canvas"),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.ctx=this.canvas.getContext("2d"),this.ctx.imageSmoothingEnabled=!1,this.ctx.scale(this.canvas.width/this.windowSize.width,this.canvas.height/this.windowSize.height),document.querySelector("#main").append(this.canvas),this.logger.info("Renderer initialized"),window.addEventListener("resize",(()=>this.resize()))}resize(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.ctx.scale(this.canvas.width/this.windowSize.width,this.canvas.height/this.windowSize.height),this.ctx.imageSmoothingEnabled=!1}drawSprite(t,e,s,i,h,n,o,r){this.ctx.drawImage(this.image,t,e,s,i,h,n,o,r)}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}}class w extends n{constructor(){super(),this.player=new c}}const y="#000000",u="#ffffff",g="#49aa10",x="#b21030";class m extends p{progress(t,e,s,i=10,h=4){this.ctx.fillStyle=u,this.ctx.fillRect(e-2,s-2,i+4,h+4),this.ctx.fillStyle=u,this.ctx.fillRect(e+i+2,s+1,1,2),this.ctx.fillStyle=y,this.ctx.fillRect(e-1,s-1,i+2,h+2),this.ctx.fillStyle=x,this.ctx.fillRect(e,s,i,4),this.ctx.fillStyle=g,this.ctx.fillRect(e,s,t/i,4)}text(t,e,s){t.split("").forEach(((t,e)=>{this.ctx.drawImage(this.image,this.spriteSheetMap[t].x,this.spriteSheetMap[t].y,this.spriteSheetMap[t].w,this.spriteSheetMap[t].h,8*e,0,8,8)}))}}var f;!function(t){t[t.MENU=0]="MENU",t[t.PLAYING=1]="PLAYING",t[t.PAUSED=2]="PAUSED",t[t.GAME_OVER=3]="GAME_OVER",t[t.OPTIONS=4]="OPTIONS",t[t.LOADING=5]="LOADING",t[t.FLYING=6]="FLYING",t[t.DISEMBARK=7]="DISEMBARK"}(f||(f={}));const S=new class{constructor(){this.renderer=new p,this.uiRenderer=new m,this.assetLoader=new t,this.scene=new w,this.currentState=f.LOADING,this.lastTime=0,this.logger=new i,this.logger.info("Game started"),this.player=new c,this.controller=new s(this),window.game=this}update(t){const e=t-this.lastTime;this.controller.keyIsDown("KeyW")&&this.player.move(new h(0,-1)),this.controller.keyIsDown("KeyA")&&this.player.move(new h(-1,0)),this.controller.keyIsDown("KeyS")&&this.player.move(new h(0,1)),this.controller.keyIsDown("KeyD")&&this.player.move(new h(1,0)),this.controller.keyIsDown("Space")&&this.player.fire(),this.lastTime=t,this.scene.update(e)}changeState(t){this.currentState=t}render(){this.renderer.clear(),this.uiRenderer.clear(),this.scene.render(this.renderer)}run(){this.logger.info("Game running");this.scene.size=new h(512,512),this.scene.pos=new h(-200,-200),this.scene.addChild(this.player),this.assetLoader.load(["assets/spritesheet.png","assets/spritesheet_map.json"]).then((()=>{this.logger.info("Assets loaded"),this.renderer.image=this.assetLoader.list.spritesheet,this.uiRenderer.image=this.assetLoader.list.spritesheet,this.uiRenderer.spriteSheetMap=this.assetLoader.list.spritesheet_map,r.game=this,this.loop()}))}loop(){this.update(performance.now()),this.render(),requestAnimationFrame((()=>this.loop()))}};S.run()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,