(()=>{"use strict";class t{constructor(){this.toLoad=0,this.loaded=0,this.isLoaded=!1,this.list={}}load(t){const s=["png"],i=["json"],e=["toml"];return this.toLoad=t.length,new Promise((n=>{t.forEach((t=>{const a=t.split(".").pop()||"";s.includes(a)?this.loadImage(t,n):i.includes(a)?this.loadJson(t,n):e.includes(a)&&this.loadConfig(t,n)}))}))}loadHandler(t){this.loaded+=1,this.loaded===this.toLoad&&(this.loaded=0,this.toLoad=0,t(this),this.isLoaded=!0)}loadImage(t,s){const i=new Image;i.src=t,i.addEventListener("load",(()=>{this.loadHandler(s)}),!1);const e=t.split("/").pop().split(".")[0];e&&(this.list[e]=i)}async loadConfig(t,s){fetch(t).then((t=>t.text())).then((s=>{const i=s.split("\n").reduce(((t,s)=>{const[i,e]=s.trim().split("=");return i&&e?(t[i.trim()]=e.trim(),t):t}),{}),e=t.split("/").pop().split(".")[0];e&&(this.list[e]=i)}))}async loadJson(t,s){try{const i=await fetch(t),e=await i.json();this.loadHandler(s);const n=t.split("/").pop().split(".")[0];this.list[n]=e}catch(t){}}}class s{error(t){console.error(t)}warn(t){console.warn(t)}info(t){console.info("ℹ️ "+t)}debug(t){console.log("📝 "+t)}}class i{constructor(){this.logger=new s,this.windowSize={width:256,height:240},this.canvas=document.createElement("canvas"),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.ctx=this.canvas.getContext("2d"),this.ctx.imageSmoothingEnabled=!1,this.ctx.scale(this.canvas.width/this.windowSize.width,this.canvas.height/this.windowSize.height),document.querySelector("#main").append(this.canvas),this.logger.info("Renderer initialized"),window.addEventListener("resize",(()=>this.resize()))}resize(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.ctx.scale(this.canvas.width/this.windowSize.width,this.canvas.height/this.windowSize.height),this.ctx.imageSmoothingEnabled=!1}drawText(t,s,i){t.split("").forEach(((t,e)=>{this.ctx.drawImage(s,i[t].x,i[t].y,i[t].w,i[t].h,8*e,0,8,8)}))}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}}var e;!function(t){t[t.MENU=0]="MENU",t[t.PLAYING=1]="PLAYING",t[t.PAUSED=2]="PAUSED",t[t.GAME_OVER=3]="GAME_OVER",t[t.OPTIONS=4]="OPTIONS",t[t.LOADING=5]="LOADING"}(e||(e={})),(new class{constructor(){this.renderer=new i,this.assetLoader=new t,this.lastTime=0,this.logger=new s,this.logger.info("Game started"),window.game=this}update(t){this.lastTime,this.lastTime=t}render(){this.renderer.drawText("SPACE SHOOTER GAIDEN V0.1",this.assetLoader.list.spritesheet,this.assetLoader.list.spritesheet_map)}run(){this.logger.info("Game running"),this.assetLoader.load(["assets/spritesheet.png","assets/spritesheet_map.json"]).then((()=>{this.logger.info("Assets loaded"),this.loop()}))}loop(){this.update(performance.now()),this.render(),requestAnimationFrame((()=>this.loop()))}}).run()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,