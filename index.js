(()=>{"use strict";class e{constructor(){this.toLoad=0,this.loaded=0,this.isLoaded=!1,this.list={}}load(e){const t=["png"],s=["json"],i=["toml"];return this.toLoad=e.length,new Promise((h=>{e.forEach((e=>{const r=e.split(".").pop()||"";t.includes(r)?this.loadImage(e,h):s.includes(r)?this.loadJson(e,h):i.includes(r)&&this.loadConfig(e,h)}))}))}loadHandler(e){this.loaded+=1,this.loaded===this.toLoad&&(this.loaded=0,this.toLoad=0,e(this),this.isLoaded=!0)}loadImage(e,t){const s=new Image;s.src=e,s.addEventListener("load",(()=>{this.loadHandler(t)}),!1);const i=e.split("/").pop().split(".")[0];i&&(this.list[i]=s)}async loadConfig(e,t){fetch(e).then((e=>e.text())).then((t=>{const s=t.split("\n").reduce(((e,t)=>{const[s,i]=t.trim().split("=");return s&&i?(e[s.trim()]=i.trim(),e):e}),{}),i=e.split("/").pop().split(".")[0];i&&(this.list[i]=s)}))}async loadJson(e,t){try{const s=await fetch(e),i=await s.json();this.loadHandler(t);const h=e.split("/").pop().split(".")[0];this.list[h]=i}catch(e){}}}const t=["KeyW","KeyA","KeyS","KeyD","Space","Escape","KeyI","KeyJ","KeyK","KeyL"];class s{constructor(e){this.keys={},console.log("Controller created"),this.game=e,this.player=e.level.player,window.addEventListener("keydown",(e=>this.handleKeyDown(e))),window.addEventListener("keyup",(e=>this.handleKeyUp(e)))}handleKeyDown(e){t.includes(e.code)&&(e.preventDefault(),this.keys[e.code]=1)}handleKeyUp(e){this.keys[e.code]=0}keyIsDown(e){return 1===this.keys[e]||!1}clearKeys(){this.keys={}}}const i={game:null,moveDisabled:!1,debug:!1};class h{constructor(e,t){this.x=e,this.y=t}add(e){return this.x+=e.x,this.y+=e.y,this}sub(e){return this.x-=e.x,this.y-=e.y,this}mul(e){return this.x*=e.x,this.y*=e.y,this}div(e){return this.x/=e.x,this.y/=e.y,this}clone(){return new h(this.x,this.y)}reset(){return this.x=0,this.y=0,this}}class r{constructor(){this.pos=new h(0,0),this.globalPos=new h(0,0),this.vel=new h(0,0),this.size=new h(8,8),this.rotation=0,this.speed=1,this.children=[],this.parent=null,this.id=Math.random().toString(16).substring(0,5)}addChild(e){this.children.includes(e)||(e.parent&&e.parent.removeChild(e),e.parent=this,this.children.push(e))}removeChild(e){e.parent=null,this.children=this.children.filter((t=>t!==e))}debugDraw(e,t=!1){i.debug&&(e.ctx.strokeStyle="magenta",e.ctx.strokeRect(this.pos.x,this.pos.y,this.size.x,this.size.y),t&&(e.ctx.strokeStyle="green",e.ctx.font="8px monospace",e.ctx.strokeText(this.id,this.pos.x,this.pos.y-4)))}update(e){this.children.forEach((t=>{t.update(e)}))}render(e){this.children.forEach((t=>{t.render(e)})),this.debugDraw(e)}isOutOfParent(e){return e.clone().add(new h(this.size.x,0)).x>=this.parent.size.x+this.parent.pos.x||e.clone().add(new h(0,this.size.y)).y>=this.parent.size.y+this.parent.pos.y||e.x<=this.parent.pos.x||e.y<=this.parent.pos.y}}class n{constructor(){this.health=100,this.exp=0,this.level=1,this.damage=10,this.speed=1,this.defense=1}}const a={basic:{damage:10,speed:5,color:"red",size:[2,2],rechargeTime:50}};var o;!function(e){e.Basic="basic"}(o||(o={}));class l extends r{constructor(e,t,s){super(),this.pos=e,this.vel=t,this.type=s,this.size=new h(a[this.type].size[0],a[this.type].size[1]),this.id="player-bullet"}update(e){this.pos.add(this.vel.clone().mul(new h(a[this.type].speed,a[this.type].speed)))}render(e){e.ctx.save(),this.debugDraw(e),e.ctx.fillStyle=a[this.type].color,e.ctx.fillRect(this.pos.x,this.pos.y,2,2),e.ctx.restore()}}class d extends r{constructor(){super(),this.stats=new n,this.bullets=[],this.recharged=0,this.id="player",this.size=new h(16,16),this.pos=new h(127.5-this.size.x,120-this.size.y),this.stats.health=50,this.speed=2}fire(e,t){if(this.recharged>a.basic.rechargeTime){let t=new h(this.pos.x,this.pos.y+16),s=new h(this.pos.x+14,this.pos.y+16);0===e.y&&(t=new h(this.pos.x,this.pos.y),s=new h(this.pos.x,this.pos.y+14));const i=new l(t,e,o.Basic);this.bullets.push(i);const r=new l(s,e,o.Basic);this.bullets.push(r)}this.recharged=0}move(e){if(i.moveDisabled)return;const t=this.pos.clone(),s=this.pos.clone().add(e.mul(new h(this.speed,this.speed)));this.isOutOfParent(s)||(this.pos=s,s.x<=50&&(this.pos=t,this.parent.pos.x+=this.speed),s.y<=50&&(this.pos=t,this.parent.pos.y+=this.speed),s.clone().add(new h(this.size.x,0)).x>=i.game.renderer.windowSize.width-50&&(this.pos=t,this.parent.pos.x-=this.speed),s.clone().add(new h(0,this.size.y)).y>=i.game.renderer.windowSize.height-50&&(this.pos=t,this.parent.pos.y-=this.speed))}update(e){this.recharged+=e,this.bullets.forEach((t=>{t.update(e)}))}render(e){e.ctx.save(),e.drawSprite(0,24,16,16,this.pos.x,this.pos.y,16,16),this.bullets.forEach((t=>{t.render(e)})),this.bullets=this.bullets.filter((t=>{return s=t,i=e.canvas.width,h=e.canvas.height,!(s.pos.x<0||s.pos.x>i||s.pos.y<0||s.pos.y>h);var s,i,h})),this.debugDraw(e),e.ctx.restore()}}const c=[{id:"grass"},{id:"grass2"}];class p extends r{constructor(e){super(),this.player=null,this.map=[],this.size=e.size,this.pos=e.pos,this.map=Array(e.size.x*e.size.y).fill(0),this.map.forEach(((e,t)=>{this.map[t]=Math.trunc(Math.random()*c.length)}))}renderMap(e){for(let t=0;t<this.size.x/16;t++)for(let s=0;s<this.size.y/16;s++){const i=c[this.map[t+s*(this.size.x/16)]];e.drawTile(i.id,new h(this.pos.x+16*t,this.pos.y+16*s))}}render(e){this.renderMap(e),this.player?.render(e),this.children.forEach((t=>{t.render(e)})),this.debugDraw(e)}}const w={size:new h(512,512),pos:new h(-200,-200),map:[]};class y extends r{constructor(){super(),this.scene=new p(w),this.player=new d,this.scene.addChild(this.player)}update(e){this.scene?.update(e)}addScene(e){this.scene=e}render(e){this.scene?.render(e)}}class u{error(e){console.error(e)}warn(e){console.warn(e)}info(e){console.info("ℹ️ "+e)}debug(e){console.log("📝 "+e)}}class g{constructor(){this.logger=new u,this.image=new Image,this.windowSize={width:256,height:240},this.spriteSheetMap={},this.canvas=document.createElement("canvas"),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.ctx=this.canvas.getContext("2d"),this.ctx.imageSmoothingEnabled=!1,this.ctx.scale(this.canvas.width/this.windowSize.width,this.canvas.height/this.windowSize.height),document.querySelector("#main").append(this.canvas),this.logger.info("Renderer initialized"),window.addEventListener("resize",(()=>this.resize()))}resize(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.ctx.scale(this.canvas.width/this.windowSize.width,this.canvas.height/this.windowSize.height),this.ctx.imageSmoothingEnabled=!1}drawTile(e,t){const{x:s,y:i,w:h,h:r}=this.spriteSheetMap[e];this.drawSprite(s,i,h,r,t.x,t.y,h+1,r+1)}drawSprite(e,t,s,i,h,r,n,a){this.ctx.drawImage(this.image,e,t,s,i,h,r,n,a)}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}}const x="#000000",m="#ffffff",f="#49aa10",v="#b21030";class S extends g{progress(e,t,s,i=10,h=4){this.ctx.fillStyle=m,this.ctx.fillRect(t-2,s-2,i+4,h+4),this.ctx.fillStyle=m,this.ctx.fillRect(t+i+2,s+1,1,2),this.ctx.fillStyle=x,this.ctx.fillRect(t-1,s-1,i+2,h+2),this.ctx.fillStyle=v,this.ctx.fillRect(t,s,i,4),this.ctx.fillStyle=f,this.ctx.fillRect(t,s,e/i,4)}text(e,t,s){e.split("").forEach(((e,t)=>{this.ctx.drawImage(this.image,this.spriteSheetMap[e].x,this.spriteSheetMap[e].y,this.spriteSheetMap[e].w,this.spriteSheetMap[e].h,8*t,0,8,8)}))}}var z;!function(e){e[e.MENU=0]="MENU",e[e.PLAYING=1]="PLAYING",e[e.PAUSED=2]="PAUSED",e[e.GAME_OVER=3]="GAME_OVER",e[e.OPTIONS=4]="OPTIONS",e[e.LOADING=5]="LOADING",e[e.FLYING=6]="FLYING",e[e.DISEMBARK=7]="DISEMBARK"}(z||(z={}));const D=new class{constructor(){this.renderer=new g,this.uiRenderer=new S,this.assetLoader=new e,this.level=new y,this.currentState=z.LOADING,this.lastTime=0,this.logger=new u,this.logger.info("Game started"),this.controller=new s(this),window.game=this}update(e){const t=e-this.lastTime;this.controller.keyIsDown("KeyW")&&this.level.player.move(new h(0,-1)),this.controller.keyIsDown("KeyA")&&this.level.player.move(new h(-1,0)),this.controller.keyIsDown("KeyS")&&this.level.player.move(new h(0,1)),this.controller.keyIsDown("KeyD")&&this.level.player.move(new h(1,0)),this.controller.keyIsDown("KeyI")&&this.level.player.fire(new h(0,-1),t),this.controller.keyIsDown("KeyJ")&&this.level.player.fire(new h(-1,0),t),this.controller.keyIsDown("KeyK")&&this.level.player.fire(new h(0,1),t),this.controller.keyIsDown("KeyL")&&this.level.player.fire(new h(1,0),t),this.lastTime=e,this.level.update(t)}changeState(e){this.currentState=e}render(){this.renderer.clear(),this.uiRenderer.clear(),this.uiRenderer.progress(this.level.player.stats.health,this.renderer.windowSize.width-28,8),this.level.render(this.renderer)}run(){this.logger.info("Game running"),this.assetLoader.load(["assets/spritesheet.png","assets/spritesheet_map.json"]).then((()=>{this.logger.info("Assets loaded"),this.renderer.image=this.assetLoader.list.spritesheet,this.renderer.spriteSheetMap=this.assetLoader.list.spritesheet_map,this.uiRenderer.image=this.assetLoader.list.spritesheet,this.uiRenderer.spriteSheetMap=this.assetLoader.list.spritesheet_map,i.game=this,this.loop()}))}loop(){this.update(performance.now()),this.render(),requestAnimationFrame((()=>this.loop()))}};D.run()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,